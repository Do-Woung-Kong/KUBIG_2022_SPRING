{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled13.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 129,
      "metadata": {
        "id": "wYQ0HWxhyov8"
      },
      "outputs": [],
      "source": [
        "import torch #파이토치\n",
        "import torchvision.datasets as dsets #MNIST 데이터셋을 불러옴\n",
        "import torchvision.transforms as transforms #이미지 변환 툴\n",
        "import torch.nn.init #텐서에 초기값을 줌\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
        "\n",
        "# 랜덤 시드 고정\n",
        "torch.manual_seed(777)\n",
        "\n",
        "# GPU 사용 가능일 경우 랜덤 시드 고정\n",
        "if device == 'cuda':\n",
        "    torch.cuda.manual_seed_all(777)"
      ],
      "metadata": {
        "id": "X4iK9xMQyri8"
      },
      "execution_count": 130,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trainset = dsets.FashionMNIST(\n",
        "    root      = './.data/', \n",
        "    train     = True,\n",
        "    download  = True,\n",
        "    transform = transforms.ToTensor()\n",
        ")\n",
        "\n",
        "testset = dsets.FashionMNIST(\n",
        "    root      = './.data/', \n",
        "    train     = False,\n",
        "    download  = True,\n",
        "    transform = transforms.ToTensor()\n",
        ")"
      ],
      "metadata": {
        "id": "sw5PpjkGyv3t"
      },
      "execution_count": 131,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# try1\n",
        "- 올려주신 코드를 사용"
      ],
      "metadata": {
        "id": "NtlL4LZG2eDf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "learning_rate = 0.001 #가중치를 얼마나 크게 갱신할지 결정하는 학습률\n",
        "training_epochs = 15 #반복학습의 횟수\n",
        "batch_size = 100 #한 iteration에서 사용할 데이터 크기"
      ],
      "metadata": {
        "id": "Eaap5haiyt3v"
      },
      "execution_count": 132,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = trainset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")\n",
        "\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = testset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")"
      ],
      "metadata": {
        "id": "7v8XntcqzLCY"
      },
      "execution_count": 133,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 데이터(이미지) 확인해보기\n",
        "from torchvision import utils\n",
        "\n",
        "dataiter       = iter(test_loader)   # iter함수로 iteration 객체 가져오기\n",
        "images, labels = next(dataiter)   # next함수로 다음 배치 1개 갖고오기\n",
        "\n",
        "img   = utils.make_grid(images[:8], padding=0)\n",
        "npimg = img.numpy()\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.imshow(np.transpose(npimg, (1,2,0)))\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 120
        },
        "id": "QxXcb_O61m0L",
        "outputId": "42f062c9-6ff4-487c-f6cb-bb39e5ccd024"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class CNN(torch.nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "\n",
        "        # first layer\n",
        "        self.layer1 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),   # convolution\n",
        "            torch.nn.ReLU(),   # activation function\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2))   # pooling\n",
        "\n",
        "        # second layer\n",
        "        self.layer2 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2))\n",
        "\n",
        "        # fully-connected layer 7x7x64 inputs -> 10 outputs\n",
        "        self.fc = torch.nn.Linear(7 * 7 * 64, 10, bias=True)\n",
        "\n",
        "        # fully-connected layer 한정으로 가중치 초기화\n",
        "        torch.nn.init.xavier_uniform_(self.fc.weight)\n",
        "\n",
        "    def forward(self, x):\n",
        "        out = self.layer1(x)   # first layer 통과\n",
        "        out = self.layer2(out)   # second layer 통과\n",
        "        out = out.view(out.size(0), -1)   # fully-connected layer를 위해서 Flatten\n",
        "        out = self.fc(out) # fully-connected layer 통과\n",
        "        return out"
      ],
      "metadata": {
        "id": "9oViDKdO1qNT"
      },
      "execution_count": 135,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model1 = CNN().to(device) "
      ],
      "metadata": {
        "id": "kDacWSoM1sRa"
      },
      "execution_count": 136,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "criterion = torch.nn.CrossEntropyLoss().to(device)   # loss function 정의\n",
        "optimizer = torch.optim.Adam(model1.parameters(), lr=learning_rate)   #optimizer 정의, Adam으로 설정"
      ],
      "metadata": {
        "id": "Upu2075R1tyo"
      },
      "execution_count": 137,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def training_model(model, data, epochs):\n",
        "  total_batch = len(data)\n",
        "\n",
        "  for epoch in range(epochs):\n",
        "    avg_cost = 0\n",
        "\n",
        "    for X, Y in data:  #data_loader에 배치들이 저장되어 있음. 한 iteration당 한 개의 배치를 꺼내와서 사용\n",
        "        X = X.to(device)   #이미지\n",
        "        Y = Y.to(device)   #레이블(해당 이미지가 뜻하는 숫자)\n",
        "\n",
        "        optimizer.zero_grad()   #지난 iteration에서 계산했던 기울기 초기화\n",
        "        hypothesis = model(X)   #순전파 과정으로 예측값 도출\n",
        "        cost = criterion(hypothesis, Y)   #예측값과 실제값을 비교한 loss\n",
        "        cost.backward()   #역전파, 기울기 계산\n",
        "        optimizer.step()   #optimizer로 가중치 갱신\n",
        "\n",
        "        avg_cost += cost / total_batch\n",
        "\n",
        "    print('[Epoch: {:>4}] cost = {:>.9}'.format(epoch + 1, avg_cost))"
      ],
      "metadata": {
        "id": "4xy1GmAR1vWu"
      },
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#모델 학습\n",
        "training_model(model = model1, data = train_loader, epochs = training_epochs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5VThs58s1w-M",
        "outputId": "2e43673c-4fba-49e4-aad5-ea6eb0470845"
      },
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    1] cost = 0.510953963\n",
            "[Epoch:    2] cost = 0.330859184\n",
            "[Epoch:    3] cost = 0.292297214\n",
            "[Epoch:    4] cost = 0.266421705\n",
            "[Epoch:    5] cost = 0.247414067\n",
            "[Epoch:    6] cost = 0.231193691\n",
            "[Epoch:    7] cost = 0.219147235\n",
            "[Epoch:    8] cost = 0.205752105\n",
            "[Epoch:    9] cost = 0.195321754\n",
            "[Epoch:   10] cost = 0.18343696\n",
            "[Epoch:   11] cost = 0.174545303\n",
            "[Epoch:   12] cost = 0.166471109\n",
            "[Epoch:   13] cost = 0.159135595\n",
            "[Epoch:   14] cost = 0.150935128\n",
            "[Epoch:   15] cost = 0.141308293\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correct = 0\n",
        "\n",
        "with torch.no_grad():\n",
        "    for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model1(data)\n",
        "            \n",
        "            pred = output.max(1, keepdim=True)[1]\n",
        "            # eq() 함수는 값이 일치하면 1을, 아니면 0을 출력.\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_accuracy = correct / len(test_loader.dataset)\n",
        "    print('Accuracy:', test_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Milpl0qQ3ee9",
        "outputId": "3e806f92-482d-4724-ee0a-b67d806e77c4"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.9108\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# try1-2\n",
        "- 모델은 그대로\n",
        "- lr 0.01 epoch 20 batch size 120으로 변경"
      ],
      "metadata": {
        "id": "ve14vkl5CI_m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "learning_rate = 0.01 #가중치를 얼마나 크게 갱신할지 결정하는 학습률\n",
        "training_epochs = 20 #반복학습의 횟수\n",
        "batch_size = 120 #한 iteration에서 사용할 데이터 크기"
      ],
      "metadata": {
        "id": "VaziI2I5CKuU"
      },
      "execution_count": 141,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = trainset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")\n",
        "\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = testset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")"
      ],
      "metadata": {
        "id": "mojyzXfBCKuV"
      },
      "execution_count": 142,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CNN(torch.nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "\n",
        "        # first layer\n",
        "        self.layer1 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),   # convolution\n",
        "            torch.nn.ReLU(),   # activation function\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2))   # pooling\n",
        "\n",
        "        # second layer\n",
        "        self.layer2 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2))\n",
        "\n",
        "        # fully-connected layer 7x7x64 inputs -> 10 outputs\n",
        "        self.fc = torch.nn.Linear(7 * 7 * 64, 10, bias=True)\n",
        "\n",
        "        # fully-connected layer 한정으로 가중치 초기화\n",
        "        torch.nn.init.xavier_uniform_(self.fc.weight)\n",
        "\n",
        "    def forward(self, x):\n",
        "        out = self.layer1(x)   # first layer 통과\n",
        "        out = self.layer2(out)   # second layer 통과\n",
        "        out = out.view(out.size(0), -1)   # fully-connected layer를 위해서 Flatten\n",
        "        out = self.fc(out) # fully-connected layer 통과\n",
        "        return out"
      ],
      "metadata": {
        "id": "qDYPrHnqCKuV"
      },
      "execution_count": 143,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model1 = CNN().to(device) "
      ],
      "metadata": {
        "id": "bWYxtPR7CKuV"
      },
      "execution_count": 144,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "criterion = torch.nn.CrossEntropyLoss().to(device)   # loss function 정의\n",
        "optimizer = torch.optim.Adam(model1.parameters(), lr=learning_rate)   #optimizer 정의, Adam으로 설정"
      ],
      "metadata": {
        "id": "nLFPflphCKuV"
      },
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#모델 학습\n",
        "training_model(model = model1, data = train_loader, epochs = training_epochs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "439c7ec5-4d29-4507-e49c-4ae91e03e709",
        "id": "2L-yS6A0CKuV"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    1] cost = 0.444995672\n",
            "[Epoch:    2] cost = 0.299361825\n",
            "[Epoch:    3] cost = 0.274358004\n",
            "[Epoch:    4] cost = 0.258610666\n",
            "[Epoch:    5] cost = 0.250977784\n",
            "[Epoch:    6] cost = 0.240514338\n",
            "[Epoch:    7] cost = 0.234005913\n",
            "[Epoch:    8] cost = 0.226072118\n",
            "[Epoch:    9] cost = 0.225680605\n",
            "[Epoch:   10] cost = 0.223359421\n",
            "[Epoch:   11] cost = 0.22290498\n",
            "[Epoch:   12] cost = 0.211738661\n",
            "[Epoch:   13] cost = 0.213255033\n",
            "[Epoch:   14] cost = 0.211711273\n",
            "[Epoch:   15] cost = 0.205952048\n",
            "[Epoch:   16] cost = 0.206955448\n",
            "[Epoch:   17] cost = 0.200307339\n",
            "[Epoch:   18] cost = 0.202586278\n",
            "[Epoch:   19] cost = 0.199779928\n",
            "[Epoch:   20] cost = 0.196470499\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correct = 0\n",
        "\n",
        "with torch.no_grad():\n",
        "    for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model1(data)\n",
        "            \n",
        "            pred = output.max(1, keepdim=True)[1]\n",
        "            # eq() 함수는 값이 일치하면 1을, 아니면 0을 출력.\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_accuracy = correct / len(test_loader.dataset)\n",
        "    print('Accuracy:', test_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ebe28756-ec60-47fa-a5c0-62c006d6eb9c",
        "id": "K9mpWXDhCKuV"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.8866\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#try2\n",
        "- 모델에 레이어 추가\n",
        "- batch norm도 추가\n"
      ],
      "metadata": {
        "id": "r8axCHcZ3tIM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "learning_rate = 0.001 #가중치를 얼마나 크게 갱신할지 결정하는 학습률\n",
        "training_epochs = 25 #반복학습의 횟수\n",
        "batch_size = 120 #한 iteration에서 사용할 데이터 크기"
      ],
      "metadata": {
        "id": "9Lo3CqLYHRdu"
      },
      "execution_count": 148,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = trainset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")\n",
        "\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = testset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")"
      ],
      "metadata": {
        "id": "V2vWLYE_IyPl"
      },
      "execution_count": 149,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CNN(torch.nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "        self.keep_prob = 0.5\n",
        "\n",
        "        self.layer1 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(32),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2,padding=1))\n",
        "        \n",
        "        self.layer2 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(32),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2))\n",
        "        \n",
        "\n",
        "        self.layer3 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(64),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2, padding=1))\n",
        "        # fourth layer (64->128)\n",
        "        self.layer4 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(128),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2, padding=1))\n",
        "\n",
        "        self.fc1 = torch.nn.Linear(3 * 3 * 128, 512, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc1.weight)   # 가중치 초기화\n",
        "        self.layer5 = torch.nn.Sequential(\n",
        "            self.fc1,\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.Dropout(p=1 - self.keep_prob))\n",
        "        \n",
        "        self.fc2 = torch.nn.Linear(512, 128, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc2.weight)\n",
        "        self.layer6 = torch.nn.Sequential(\n",
        "            self.fc2,\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.Dropout(p=0.3))\n",
        "         \n",
        "        self.fc3 = torch.nn.Linear(128, 10, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc3.weight)\n",
        "\n",
        "\n",
        "    def forward(self, x):\n",
        "        out = self.layer1(x)   # first layer 통과\n",
        "        out = self.layer2(out)   # second layer 통과\n",
        "        out = self.layer3(out)\n",
        "        out = self.layer4(out)  \n",
        "        out = out.view(out.size(0), -1)   # fully-connected layer를 위해서 Flatten\n",
        "        out = self.layer5(out) \n",
        "        out = self.layer6(out)\n",
        "        out = self.fc3(out)   # fifth layer 통과\n",
        "        return out"
      ],
      "metadata": {
        "id": "uYMNG_7b12zw"
      },
      "execution_count": 150,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model2 = CNN().to(device)"
      ],
      "metadata": {
        "id": "vItVhHYV14Sr"
      },
      "execution_count": 151,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "criterion = torch.nn.CrossEntropyLoss().to(device)\n",
        "optimizer = torch.optim.Adam(model2.parameters(), lr=learning_rate)\n"
      ],
      "metadata": {
        "id": "nGepUMbG15mM"
      },
      "execution_count": 152,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#모델 학습\n",
        "training_model(model = model2, data = train_loader, epochs = training_epochs)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fgkDhNCz16xS",
        "outputId": "a0523ee0-7169-4d7f-8f2b-ea5cf6f18f33"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    1] cost = 0.555624962\n",
            "[Epoch:    2] cost = 0.340292782\n",
            "[Epoch:    3] cost = 0.285076022\n",
            "[Epoch:    4] cost = 0.252815068\n",
            "[Epoch:    5] cost = 0.228929922\n",
            "[Epoch:    6] cost = 0.216105342\n",
            "[Epoch:    7] cost = 0.196161449\n",
            "[Epoch:    8] cost = 0.181076005\n",
            "[Epoch:    9] cost = 0.170850083\n",
            "[Epoch:   10] cost = 0.160815209\n",
            "[Epoch:   11] cost = 0.148849189\n",
            "[Epoch:   12] cost = 0.134817481\n",
            "[Epoch:   13] cost = 0.127271056\n",
            "[Epoch:   14] cost = 0.118044503\n",
            "[Epoch:   15] cost = 0.109723479\n",
            "[Epoch:   16] cost = 0.100061886\n",
            "[Epoch:   17] cost = 0.0921889916\n",
            "[Epoch:   18] cost = 0.0855516866\n",
            "[Epoch:   19] cost = 0.079368107\n",
            "[Epoch:   20] cost = 0.0745265186\n",
            "[Epoch:   21] cost = 0.0680717379\n",
            "[Epoch:   22] cost = 0.0680939257\n",
            "[Epoch:   23] cost = 0.060081955\n",
            "[Epoch:   24] cost = 0.0555027761\n",
            "[Epoch:   25] cost = 0.0547045581\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correct = 0\n",
        "\n",
        "with torch.no_grad():\n",
        "    for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model2(data)\n",
        "            \n",
        "            pred = output.max(1, keepdim=True)[1]\n",
        "            # eq() 함수는 값이 일치하면 1을, 아니면 0을 출력.\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_accuracy = correct / len(test_loader.dataset)\n",
        "    print('Accuracy:', test_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4vS1EsszEIvJ",
        "outputId": "0b9f2da4-6d57-4e7a-ac9d-05f109dc86f8"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.9166\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "try2-2"
      ],
      "metadata": {
        "id": "VkNHm1IXGWwf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class CNN(torch.nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "        self.keep_prob = 0.5\n",
        "\n",
        "        self.layer1 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2,padding=1))\n",
        "        \n",
        "        self.layer2 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2))\n",
        "        \n",
        "\n",
        "        self.layer3 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2, padding=1))\n",
        "        # fourth layer (64->128)\n",
        "        self.layer4 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.MaxPool2d(kernel_size=2, stride=2, padding=1))\n",
        "\n",
        "        self.fc1 = torch.nn.Linear(3 * 3 * 128, 512, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc1.weight)   # 가중치 초기화\n",
        "        self.layer5 = torch.nn.Sequential(\n",
        "            self.fc1,\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.Dropout(p=1 - self.keep_prob))\n",
        "        \n",
        "        self.fc2 = torch.nn.Linear(512, 128, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc2.weight)\n",
        "        self.layer6 = torch.nn.Sequential(\n",
        "            self.fc2,\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.Dropout(p=0.3))\n",
        "         \n",
        "        self.fc3 = torch.nn.Linear(128, 10, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc3.weight)\n",
        "\n",
        "\n",
        "    def forward(self, x):\n",
        "        out = self.layer1(x)   # first layer 통과\n",
        "        out = self.layer2(out)   # second layer 통과\n",
        "        out = self.layer3(out)\n",
        "        out = self.layer4(out)  \n",
        "        out = out.view(out.size(0), -1)   # fully-connected layer를 위해서 Flatten\n",
        "        out = self.layer5(out) \n",
        "        out = self.layer6(out)\n",
        "        out = self.fc3(out)   # fifth layer 통과\n",
        "        return out"
      ],
      "metadata": {
        "id": "9vZv-BpoGWwf"
      },
      "execution_count": 155,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model3 = CNN().to(device)"
      ],
      "metadata": {
        "id": "rLs8UTc6GWwg"
      },
      "execution_count": 156,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "criterion = torch.nn.CrossEntropyLoss().to(device)\n",
        "optimizer = torch.optim.Adam(model3.parameters(), lr=learning_rate)\n"
      ],
      "metadata": {
        "id": "iP-zB1swGWwg"
      },
      "execution_count": 157,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#모델 학습\n",
        "training_model(model = model3, data = train_loader, epochs = training_epochs)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "16184484-7816-4b90-ffef-c0af5ec18c4e",
        "id": "ophJwrWmGWwg"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    1] cost = 0.677952707\n",
            "[Epoch:    2] cost = 0.367882758\n",
            "[Epoch:    3] cost = 0.303254366\n",
            "[Epoch:    4] cost = 0.266850978\n",
            "[Epoch:    5] cost = 0.23787424\n",
            "[Epoch:    6] cost = 0.216433823\n",
            "[Epoch:    7] cost = 0.201484069\n",
            "[Epoch:    8] cost = 0.187283337\n",
            "[Epoch:    9] cost = 0.174399793\n",
            "[Epoch:   10] cost = 0.160761982\n",
            "[Epoch:   11] cost = 0.147777438\n",
            "[Epoch:   12] cost = 0.140529841\n",
            "[Epoch:   13] cost = 0.129546091\n",
            "[Epoch:   14] cost = 0.119425461\n",
            "[Epoch:   15] cost = 0.11258769\n",
            "[Epoch:   16] cost = 0.103374436\n",
            "[Epoch:   17] cost = 0.0952270105\n",
            "[Epoch:   18] cost = 0.0899363309\n",
            "[Epoch:   19] cost = 0.0900530666\n",
            "[Epoch:   20] cost = 0.0768126696\n",
            "[Epoch:   21] cost = 0.0766010806\n",
            "[Epoch:   22] cost = 0.0689105839\n",
            "[Epoch:   23] cost = 0.0662496537\n",
            "[Epoch:   24] cost = 0.0643855333\n",
            "[Epoch:   25] cost = 0.0599787757\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correct = 0\n",
        "\n",
        "with torch.no_grad():\n",
        "    for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model3(data)\n",
        "            \n",
        "            pred = output.max(1, keepdim=True)[1]\n",
        "            # eq() 함수는 값이 일치하면 1을, 아니면 0을 출력.\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_accuracy = correct / len(test_loader.dataset)\n",
        "    print('Accuracy:', test_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ca079f1f-d492-406b-f184-2c6995f094db",
        "id": "-JauNGjkGWwg"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.912\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "64Joh7VrM0uE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#try3\n",
        "- avg pooling으로 바꾸기\n"
      ],
      "metadata": {
        "id": "wlyr9mR6M04T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "learning_rate = 0.001 #가중치를 얼마나 크게 갱신할지 결정하는 학습률\n",
        "training_epochs = 25 #반복학습의 횟수\n",
        "batch_size = 120 #한 iteration에서 사용할 데이터 크기"
      ],
      "metadata": {
        "id": "yHZJ5KBvM04U"
      },
      "execution_count": 160,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = trainset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")\n",
        "\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = testset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")"
      ],
      "metadata": {
        "id": "U23aXe4IM04U"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CNN(torch.nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "        self.keep_prob = 0.5\n",
        "\n",
        "        self.layer1 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(32),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.AvgPool2d(kernel_size=2, stride=2,padding=1))\n",
        "        \n",
        "        self.layer2 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(32),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.AvgPool2d(kernel_size=2, stride=2))\n",
        "        \n",
        "\n",
        "        self.layer3 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(64),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.AvgPool2d(kernel_size=2, stride=2, padding=1))\n",
        "        # fourth layer (64->128)\n",
        "        self.layer4 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(128),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.AvgPool2d(kernel_size=2, stride=2, padding=1))\n",
        "\n",
        "        self.fc1 = torch.nn.Linear(3 * 3 * 128, 512, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc1.weight)   # 가중치 초기화\n",
        "        self.layer5 = torch.nn.Sequential(\n",
        "            self.fc1,\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.Dropout(p=1 - self.keep_prob))\n",
        "        \n",
        "        self.fc2 = torch.nn.Linear(512, 128, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc2.weight)\n",
        "        self.layer6 = torch.nn.Sequential(\n",
        "            self.fc2,\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.Dropout(p=0.3))\n",
        "         \n",
        "        self.fc3 = torch.nn.Linear(128, 10, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc3.weight)\n",
        "\n",
        "\n",
        "    def forward(self, x):\n",
        "        out = self.layer1(x)   # first layer 통과\n",
        "        out = self.layer2(out)   # second layer 통과\n",
        "        out = self.layer3(out)\n",
        "        out = self.layer4(out)  \n",
        "        out = out.view(out.size(0), -1)   # fully-connected layer를 위해서 Flatten\n",
        "        out = self.layer5(out) \n",
        "        out = self.layer6(out)\n",
        "        out = self.fc3(out)   # fifth layer 통과\n",
        "        return out"
      ],
      "metadata": {
        "id": "p6KgAGaGM04U"
      },
      "execution_count": 162,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model3 = CNN().to(device)"
      ],
      "metadata": {
        "id": "--Lt8I8KM04U"
      },
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "criterion = torch.nn.CrossEntropyLoss().to(device)\n",
        "optimizer = torch.optim.Adam(model3.parameters(), lr=learning_rate)\n"
      ],
      "metadata": {
        "id": "feJgsAqsM04U"
      },
      "execution_count": 167,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#모델 학습\n",
        "training_model(model = model3, data = train_loader, epochs = training_epochs)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "41f861a3-a763-474c-de8d-ffbd6e14b0ef",
        "id": "TUsU6fokM04U"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    1] cost = 0.528315783\n",
            "[Epoch:    2] cost = 0.329663455\n",
            "[Epoch:    3] cost = 0.278781831\n",
            "[Epoch:    4] cost = 0.252415687\n",
            "[Epoch:    5] cost = 0.228998348\n",
            "[Epoch:    6] cost = 0.2152711\n",
            "[Epoch:    7] cost = 0.201739118\n",
            "[Epoch:    8] cost = 0.187399298\n",
            "[Epoch:    9] cost = 0.174704939\n",
            "[Epoch:   10] cost = 0.165198833\n",
            "[Epoch:   11] cost = 0.152460381\n",
            "[Epoch:   12] cost = 0.142103851\n",
            "[Epoch:   13] cost = 0.133447871\n",
            "[Epoch:   14] cost = 0.127698377\n",
            "[Epoch:   15] cost = 0.119277723\n",
            "[Epoch:   16] cost = 0.109577499\n",
            "[Epoch:   17] cost = 0.103769541\n",
            "[Epoch:   18] cost = 0.0920441523\n",
            "[Epoch:   19] cost = 0.0878325701\n",
            "[Epoch:   20] cost = 0.0853638873\n",
            "[Epoch:   21] cost = 0.0808930397\n",
            "[Epoch:   22] cost = 0.0714069828\n",
            "[Epoch:   23] cost = 0.0679265186\n",
            "[Epoch:   24] cost = 0.0653680116\n",
            "[Epoch:   25] cost = 0.0599386841\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correct = 0\n",
        "\n",
        "with torch.no_grad():\n",
        "    for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model2(data)\n",
        "            \n",
        "            pred = output.max(1, keepdim=True)[1]\n",
        "            # eq() 함수는 값이 일치하면 1을, 아니면 0을 출력.\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_accuracy = correct / len(test_loader.dataset)\n",
        "    print('Accuracy:', test_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1063f5bb-4e0e-4df5-a6bb-9d0154077627",
        "id": "J82hdkvFM04U"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.9176\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "6naJdJ2ANP31"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#try3\n",
        "- drop out rate 0.7로 변경\n"
      ],
      "metadata": {
        "id": "ymc3t_HUNUP3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "learning_rate = 0.001 #가중치를 얼마나 크게 갱신할지 결정하는 학습률\n",
        "training_epochs = 25 #반복학습의 횟수\n",
        "batch_size = 120 #한 iteration에서 사용할 데이터 크기"
      ],
      "metadata": {
        "id": "ggcb_j3-NUP3"
      },
      "execution_count": 171,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = trainset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")\n",
        "\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "    dataset     = testset,\n",
        "    batch_size  = batch_size,\n",
        "    shuffle     = True,\n",
        ")"
      ],
      "metadata": {
        "id": "0xt01DkHNUP3"
      },
      "execution_count": 172,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CNN(torch.nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "        self.keep_prob = 0.3\n",
        "\n",
        "        self.layer1 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(32),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.AvgPool2d(kernel_size=2, stride=2,padding=1))\n",
        "        \n",
        "        self.layer2 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(32),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.AvgPool2d(kernel_size=2, stride=2))\n",
        "        \n",
        "\n",
        "        self.layer3 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(64),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.AvgPool2d(kernel_size=2, stride=2, padding=1))\n",
        "        # fourth layer (64->128)\n",
        "        self.layer4 = torch.nn.Sequential(\n",
        "            torch.nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n",
        "            torch.nn.BatchNorm2d(128),\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.AvgPool2d(kernel_size=2, stride=2, padding=1))\n",
        "\n",
        "        self.fc1 = torch.nn.Linear(3 * 3 * 128, 512, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc1.weight)   # 가중치 초기화\n",
        "        self.layer5 = torch.nn.Sequential(\n",
        "            self.fc1,\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.Dropout(p=1 - self.keep_prob))\n",
        "        \n",
        "        self.fc2 = torch.nn.Linear(512, 128, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc2.weight)\n",
        "        self.layer6 = torch.nn.Sequential(\n",
        "            self.fc2,\n",
        "            torch.nn.ReLU(),\n",
        "            torch.nn.Dropout(p=0.3))\n",
        "         \n",
        "        self.fc3 = torch.nn.Linear(128, 10, bias=True)\n",
        "        torch.nn.init.xavier_uniform_(self.fc3.weight)\n",
        "\n",
        "\n",
        "    def forward(self, x):\n",
        "        out = self.layer1(x)   # first layer 통과\n",
        "        out = self.layer2(out)   # second layer 통과\n",
        "        out = self.layer3(out)\n",
        "        out = self.layer4(out)  \n",
        "        out = out.view(out.size(0), -1)   # fully-connected layer를 위해서 Flatten\n",
        "        out = self.layer5(out) \n",
        "        out = self.layer6(out)\n",
        "        out = self.fc3(out)   # fifth layer 통과\n",
        "        return out"
      ],
      "metadata": {
        "id": "IFH70oYvNUP3"
      },
      "execution_count": 173,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model4 = CNN().to(device)"
      ],
      "metadata": {
        "id": "zdCSO6OTNUP4"
      },
      "execution_count": 174,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "criterion = torch.nn.CrossEntropyLoss().to(device)\n",
        "optimizer = torch.optim.Adam(model4.parameters(), lr=learning_rate)\n"
      ],
      "metadata": {
        "id": "SXGthZvONUP4"
      },
      "execution_count": 175,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#모델 학습\n",
        "training_model(model = model4, data = train_loader, epochs = training_epochs)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7e0a3246-d426-4303-f835-e530c2e1a564",
        "id": "VjX7AmsVNUP4"
      },
      "execution_count": 176,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    1] cost = 0.612061799\n",
            "[Epoch:    2] cost = 0.36502865\n",
            "[Epoch:    3] cost = 0.310007215\n",
            "[Epoch:    4] cost = 0.273684949\n",
            "[Epoch:    5] cost = 0.252253205\n",
            "[Epoch:    6] cost = 0.235745087\n",
            "[Epoch:    7] cost = 0.220950067\n",
            "[Epoch:    8] cost = 0.21039021\n",
            "[Epoch:    9] cost = 0.19626309\n",
            "[Epoch:   10] cost = 0.183077693\n",
            "[Epoch:   11] cost = 0.174472421\n",
            "[Epoch:   12] cost = 0.167992264\n",
            "[Epoch:   13] cost = 0.15438585\n",
            "[Epoch:   14] cost = 0.145278692\n",
            "[Epoch:   15] cost = 0.139480025\n",
            "[Epoch:   16] cost = 0.133766055\n",
            "[Epoch:   17] cost = 0.123221137\n",
            "[Epoch:   18] cost = 0.117440715\n",
            "[Epoch:   19] cost = 0.108520865\n",
            "[Epoch:   20] cost = 0.104975343\n",
            "[Epoch:   21] cost = 0.0981202498\n",
            "[Epoch:   22] cost = 0.0928615853\n",
            "[Epoch:   23] cost = 0.0870129764\n",
            "[Epoch:   24] cost = 0.0780739933\n",
            "[Epoch:   25] cost = 0.0790664703\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correct = 0\n",
        "\n",
        "with torch.no_grad():\n",
        "    for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = model4(data)\n",
        "            \n",
        "            pred = output.max(1, keepdim=True)[1]\n",
        "            # eq() 함수는 값이 일치하면 1을, 아니면 0을 출력.\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_accuracy = correct / len(test_loader.dataset)\n",
        "    print('Accuracy:', test_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4_hLPcPDNUP4",
        "outputId": "a8435cb0-9e22-4048-d024-31c166e59553"
      },
      "execution_count": 177,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.9241\n"
          ]
        }
      ]
    }
  ]
}